{"version":3,"sources":["components/ToDoForm.js","components/ToDo.js","components/SearchToDo.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","SearchToDo","setFiltro","TodoList","setTodos","filtro","tareasFiltradas","filter","tarea","toLowerCase","includes","test","newTodos","console","log","updatedTodos","removedArr","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a60d963.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    // useEffect(() => {\r\n    // inputRef.current.focus();\r\n    // });\r\n\r\n    const handleChange = e => {\r\n    setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n        id: Math.floor(Math.random() * 10000),\r\n        text: input\r\n    });\r\n    setInput('');\r\n    };\r\n\r\n    return (\r\n    <form onSubmit={handleSubmit} className='todo-form'>\r\n        {props.edit ? (\r\n        <>\r\n            <input\r\n            placeholder='Editar Tarea'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo-input edit'\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button edit'>\r\n            Editar Tarea\r\n            </button>\r\n        </>\r\n        ) : (\r\n        <>\r\n            <input\r\n            placeholder='Agregar'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo-input'\r\n            ref={inputRef}\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button'>\r\n            Agregar Tarea\r\n            </button>\r\n        </>\r\n        )}\r\n    </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import React, { useState } from 'react';\r\nimport TodoForm from './ToDoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n    const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n        id: null,\r\n        value: ''\r\n    });\r\n    };\r\n\r\n    if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n    <div\r\n        className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n        key={index}\r\n        >\r\n        <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n        </div>\r\n        <div className='icons'>\r\n        <RiCloseCircleLine\r\n            onClick={() => removeTodo(todo.id)}\r\n            className='delete-icon'\r\n        />\r\n        <TiEdit\r\n            onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n            className='edit-icon'\r\n        />\r\n        </div>\r\n    </div>\r\n    ));\r\n};\r\n\r\nexport default Todo;","import React from 'react'\r\n\r\n\r\nexport default function SearchToDo({setFiltro}) {\r\n    return (\r\n        <input className='todo-input search' placeholder=\"Buscar...\"  onChange={({target}) => setFiltro(target.value) } />\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './ToDoForm';\r\nimport Todo from './ToDo';\r\nimport SearchToDo from './SearchToDo';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n    const [filtro, setFiltro] = useState(\"\");\r\n\r\n    let  tareasFiltradas = todos;\r\n\r\n    if(filtro != \"\"){\r\n            tareasFiltradas = todos.filter(tarea => tarea.text.toLowerCase().includes(filtro.toLowerCase()))\r\n    }\r\n\r\n    const addTodo = todo => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n        return;\r\n    }\r\n\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n    console.log(...todos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n        return;\r\n    }\r\n\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    };\r\n\r\n    const removeTodo = id => {\r\n    const removedArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n    setTodos(removedArr);\r\n    };\r\n\r\n    const completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n        if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n    }\r\n        return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n    <div>\r\n        <h1>Lista de cosas para hacer</h1>\r\n        <SearchToDo setFiltro={setFiltro} />\r\n        <TodoForm onSubmit={addTodo} />\r\n        <Todo\r\n        todos={tareasFiltradas}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n        />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/ToDoList';\n\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}